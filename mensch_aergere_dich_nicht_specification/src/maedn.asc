Mensch Ärgere Dich Nicht
========================
Verteilte Systeme, SoSe 2014, Version 1.0, 25. Mai 2014
:lang: de

Terminologie
------------

Offenes Spiel::
  Ein Spiel, an dem weniger als 4 Clients teilnehmen und das noch nicht
  begonnen hat.

Rahmendaten
-----------

Teilnehmer::
  2 Teilnehmer: Client/Server

Adressierung::
  TCP/IP (technisch), Nickname (konzeptionell)

Transportprotokoll::
  WebSocket

Kommunikation::
  Halb-duplex, Unicast (technisch), unicast oder broadcast (konzeptionell,
  abhängig von der Nachricht), verbindungsorientiert

Encoding::
  UTF-8

Nachrichtenformat::
  JSON

Ablauf
------

Das Spiel ist in drei Phasen unterteilt: Die <<Auswahlphase, Auswahlphase>>,
die <<Verbindungsphase, Verbindungsphase>> und die <<Spielphase, Spielphase>>.

[[Auswahlphase]]
Auswahlphase
~~~~~~~~~~~~

1. Client verbindet sich mit dem Server
2. Client holt Liste von Spielen
3. Client wählt ein Spiel aus. Dabei hat er folgende Möglichkeiten:
   - Er wählt ein existierendes offenes Spiel aus
   - Er erstellt ein neues Spiel
4. Client tritt dem Spiel bei. Dadurch gelangt Client automatisch in die
   Verbindungsphase. Client sendet dabei seinen Nickname an den Server.
5. In folgenden Fällen lehnt der Server den Beitritt ab:
   - Wenn der gewählte Nickname im Spiel bereits existiert
   - Wenn bereits vier Spieler teilnehmen

[[Verbindungsphase]]
Verbindungsphase
~~~~~~~~~~~~~~~~

1. Wenn ein neuer Client teilnimmt oder ein Client das Spiel verlässt,
   sendet der Server eine Nachricht an alle Clients
2. Client signalisiert Bereitschaft. Bereitschaft kann nicht
   zurückgenommen werden.
3. Wenn mindestens zwei Clients teilnehmen und wenn alle teilnehmenden
   Clients bereit sind, dann wird ein Timer von 10 Sekunden gestartet.
   Server signalisiert Timer-Start, indem er eine Nachricht an alle
   Teilnehmer schickt.
4. Timer wird abgebrochen, wenn ein neuer Teilnehmer dazu kommt. Erst
   wenn der neue Teilnehmer auch bereit ist, wird der Timer neu gestartet.
   Ein Timer-Abbruch wird vom Server durch eine Nachricht an alle Teilnehmer
   signalisiert.
5. Timer wird neu gestartet, wenn ein Teilnehmer das Spiel verlässt und
   immer noch mindestens zwei Clients teilnehmen. Ansonsten wird Timer
   abgebrochen. Ein Neustart des Timers wird durch Senden der Nachricht
   zum Abbruch des Timers mit anschließender Nachricht zum Starten signalisiert.
6. Wenn der Timer abgelaufen ist, gelangen alle Clients automatisch in
   die Spielphase. Der Server sendet hierfür eine Nachricht an alle Clients.

[[Spielphase]]
Spielphase
~~~~~~~~~~

1. Client sendet Aktion (Würfeln oder Bewegen) an Server
2. Aktuelle Würfelergebnisse werden direkt an alle Clients verschickt
3. Nach einem Spielzug sendet der Server die komplette neue Spielsituation
   an alle Clients
4. Ein Spieler hat gewonnen, wenn alle seine Figuren im Ziel sind. Der
   Server sendet eine Nachricht an alle.
5. Wenn nur noch ein Spieler übrig ist, dann ist das Spiel zu Ende. Server
   sendet Nachricht an alle.

Fehlerbehandlung
~~~~~~~~~~~~~~~~

- Wenn ein Spieler nicht mehr reagiert (timeout), dann wird er aus dem Spiel
  entfernt. Server sendet eine <<updatePlayers,`updatePlayers`>>-Nachricht an alle verbleibenden
  Teilnehmer. Im Payload der Nachricht ist der entfernte Spieler nicht mehr
  enthalten. In der Spielphase sendet der Server außerdem eine
  <<updateMatch,`updateMatch`>>-Nachricht, um die Spielsteine des Teilnehmers,
  der das Spiel verlassen hat, vom Spielfeld zu entfernen.

Nachrichten
-----------

In diesem Abschnitt werden die Nachrichten spezifiziert, die zwischen
Client und Server ausgetauscht werden können. Jede Nachricht wird in
folgendem Format angegeben:

[options="compact"]
* Beschreibung der Nachricht
* Phase, in der die Nachricht gesendet werden kann
* Beispiel

Das Beispiel beschreibt jeweils den Austausch der Nachricht zwischen
zwei Partnern (Client und Server bzw. Server und Client). Es besteht
aus einer `action` (Senden der Nachricht) und einer `response`
(Antwort auf die Nachricht). Erfordert die Nachricht das Benachrichtigen
anderer Clients wird dies explizit mit einem weiteren Beispiel angegeben.

connect
~~~~~~~

Beschreibung::
  Die Nachricht wird vom Client gesendet, um sich mit dem Server zu
  verbinden.

Phase::
  Auswahlphase

----
C: {
     "action": "connect"
   }

S: {
     "response": "connected"
   }
----

getMatches
~~~~~~~~~~

Beschreibung::
  Client möchte die Liste aller Spiele vom Server holen.

Phase::
  Auswahlphase

----
C: {
     "action": "getMatches"
   }

S: {
     "response": "matches",
     "payload": {
       "matches": [ {
           "id": number,
           "countMembers": number
         }, {
           "id": number,
           "countMembers": number
         }
       ]
     }
   }
----

`matches` enthält für jedes Spiel einen Eintrag. `countMembers` ist
die Anzahl von Teilnehmern im jeweiligen Spiel.

[[join]]
join
~~~~

Beschreibung::
  Client tritt einem Spiel bei.

Phase::
  Auswahlphase

----
C: {
     "action": "join",
     "payload": {
       "matchId": number,
       "nickname": string
     }
   }

S: {
     "response": "joined",
     "payload": {
       "matchId": number,
       "clients": [ {
           "nickname": string,
           "color": string,
           "ready": boolean
         }, {
           "nickname": string,
           "color": string,
           "ready": boolean
         }
       ]
     }
   }
----

`payload` enthält die ID des Spiels sowie eine Liste aller Clients, die
an dem Spiel teilnehmen. Jeder Client hat einen Namen (`nickname`) und
eine Spielfarbe (`color`). Außerdem wird angegeben, ob der Client
bereit zum Spielen ist (`ready = true`) oder nicht (`ready = false`). Mögliche Werte
für die Spielfarbe sind:

[options="compact"]
* `red`
* `blue`
* `green`
* `yellow`

Sollte der vom Client gewählte Name (`nickname`) im Spiel bereits
von einem anderen Teilnehmer belegt sein, antwortet der Server mit
einer Fehlemeldung:

----
S: {
     "response": "error",
     "payload": {
       "message": "Nickname already in use!"
     }
   }
----

Nehmen bereits vier Spieler an dem Spiel teil, sendet der Server
folgende Fehlermeldung:

----
S: {
     "response": "error",
     "payload": {
       "message": "Match is full!"
     }
   }
----

Existiert die vom Client gewählte Match-ID nicht, sendet der Server
folgende Nachricht:

----
S: {
     "response": "error",
     "payload": {
       "message": "Match does not exist!"
     }
   }
----

Nachdem ein Client einem existierenden Spiel beigetreten ist, sendet der
Server eine <<updatePlayers,`updatePlayers`>>-Nachricht an
*alle anderen Teilnehmer*.

----
S: {
     "action": "updatePlayers",
     "payload": {
       "matchId": number,
       "clients": [ {
           "nickname": string,
           "color": string,
           "ready": boolean
         }, {
           "nickname": string,
           "color": string,
           "ready": boolean
         }
       ]
     }
   }

C: {
     "response": "playersUpdated"
   }
----

create
~~~~~~

Beschreibung::
  Client möchte ein neues Spiel erzeugen

Phase::
  Auswahlphase

----
C: {
     "action": "create",
     "payload": {
       "nickname": string
     }
   }

S: {
     "response": "joined",
     "payload": {
       "matchId": number,
       "clients": [ {
           "nickname": string,
           "color": string,
           "ready": boolean
         }
       ]
     }
   }
----

Die Antwort des Servers hat das gleiche Format wie die der
<<join,`join`>>-Nachricht.

leave
~~~~~

Beschreibung::
  Client verlässt ein Spiel

Phasen::
  Verbindungsphase, Spielphase

----
C: {
     "action": "leave"
   }

S: {
     "response": "left"
   }
----

Der Server informiert daraufhin *alle verbleibenden Teilnehmer* darüber,
dass ein Client das Spiel verlassen hat. Er sendet eine
<<updatePlayers,`updatePlayers`>>-Nachricht, in der der Client, der das
Spiel verlassen hat, nicht mehr enthalten ist.

----
S: {
     "action": "updatePlayers",
     "payload": {
       "matchId": number,
       "clients": [ {
           "nickname": string,
           "color": string,
           "ready": boolean
         }, {
           "nickname": string,
           "color": string,
           "ready": boolean
         }
       ]
     }
   }

C: {
     "response": "playersUpdated"
   }
----

[[updatePlayers]]
updatePlayers
~~~~~~~~~~~~~

Beschreibung::
  Server benachrichtigt *alle Clients* wenn ein Teilnehmer dem Spiel
  beigetreten ist, das Spiel verlassen hat, oder wenn sich die
  Bereitschaft eines Spielers geändert hat.

Phasen::
  Verbindungsphase, Spielphase

----
S: {
     "action": "updatePlayers",
     "payload": {
       "matchId": number,
       "clients": [ {
           "nickname": string,
           "color": string,
           "ready": boolean
         }, {
           "nickname": string,
           "color": string,
           "ready": boolean
         }
       ]
     }
   }

C: {
     "response": "playersUpdated"
   }
----

`payload` enthält die ID des Spiels sowie eine Liste aller Clients, die
an dem Spiel teilnehmen. Jeder Client hat einen Namen (`nickname`) und
eine Spielfarbe (`color`). Außerdem wird angegeben, ob der Client
bereit zum Spielen ist (`ready = true`) oder nicht (`ready = false`). Mögliche Werte
für die Spielfarbe sind:

[options="compact"]
* `red`
* `blue`
* `green`
* `yellow`

ready
~~~~~

Beschreibung::
  Client signalisiert, dass er bereit zum Spielen ist

Phase::
  Verbindungsphase

----
C: {
     "action": "ready"
   }

S: {
     "response": "updatePlayers",
     "payload": {
       "matchId": number,
       "clients": [ {
           "nickname": string,
           "color": string,
           "ready": boolean
         }, {
           "nickname": string,
           "color": string,
           "ready": boolean
         }
       ]
     }
   }
----

Daraufhin benachrichtigt der Server auch *die anderen Teilnehmer* über
die Bereitschaft des Clients, indem er eine
<<updatePlayers,`updatePlayers`>>-Nachricht verschickt.

----
S: {
     "action": "updatePlayers",
     "payload": {
       "matchId": number,
       "clients": [ {
           "nickname": string,
           "color": string,
           "ready": boolean
         }, {
           "nickname": string,
           "color": string,
           "ready": boolean
         }
       ]
     }
   }

C: {
     "response": "playersUpdated"
   }
----

timerStart
~~~~~~~~~~

Beschreibung::
  Server startet einen Timer, nach dessen Ablauf das Spiel beginnt. Die
  Nachricht wird stets an *alle Teilnehmer* verschickt.

Phase::
  Verbindungsphase

----
S: {
     "action": "timerStart",
     "payload": {
       "seconds": number
     }
   }

C: {
     "response": "timerStarted"
   }
----

timerAbort
~~~~~~~~~~

Beschreibung::
  Server bricht Timer ab. Die Nachricht wird stets an *alle Teilnehmer*
  verschickt.

Phase::
  Verbindungsphase

----
S: {
     "action": "timerAbort"
   }

C: {
     "response": "timerAborted"
   }
----

matchStart
~~~~~~~~~~

Beschreibung::
  Server sendet diese Nachricht an *alle Teilnehmer*, um das Spiel zu
  starten (Übergang in die Spielphase).

Phase::
  Verbindungsphase

----
S: {
     "action": "matchStart"
   }

C: {
     "response": "matchStarted"
   }
----

[[matchUpdate]]
matchUpdate
~~~~~~~~~~~

Beschreibung::
  Server sendet diese Nachricht an *alle Teilnehmer*, um die aktuelle
  Spielsituation zu übertragen. Die Nachricht wird auf jeden Fall
  *zu Beginn der Spielphase* gesendet. Im Verlauf des Spiels wird sie
  nach jedem Zug gesendet.

Phase::
  Spielphase

----
S: {
     "action": "matchUpdate",
     "payload": {
       "currentPlayerNickname": string,
       "board": [ {
           "nickname": string,
           "x": number,
           "y": number
         }, {
           "nickname": string,
           "x": number,
           "y": number
         }
       ]
     }
   }

C: {
     "response": "matchUpdated"
   }
----

`currentPlayerNickname` enthält den Namen des Spielers, der gerade am
Zug ist. `board` enthält alle im Spiel befindlichen Spielsteine.
Jeder Spielstein wird durch ein Objekt repräsentiert, das den Namen
des Spielers enthält, sowie die Position des Spielsteins auf dem Spielbrett
als `x`/`y`-Koordinatenpaar.

rollDice
~~~~~~~~

Beschreibung::
  Client würfelt

Phase::
  Spielphase

----
C: {
     "action": "rollDice"
   }

S: {
     "response": "diceRolled",
     "payload": {
       "nickname": string,
       "eyes": number
     }
   }
----

Daraufhin sendet der Server das Würfelergebnis auch an *alle anderen
Teilnehmer*.

----
S: {
     "action": "diceRolled",
     "payload": {
       "nickname": string,
       "eyes": number
     }
   }

C: {
     "response": "diceRolled"
   }
----

`nickname` ist der Name des Spielers, der gewürfelt hat. `eyes` ist
das Würfelergebnis (Augenzahl).

move
~~~~

Beschreibung::
  Client bewegt eine Spielfigur

Phase::
  Spielphase

----
C: {
     "action": "move",
     "payload": {
       "fromX": number,
       "fromY": number,
       "toX": number,
       "toY": number
     }
   }

S: {
     "response": "matchUpdate",
     "payload": {
       "currentPlayerNickname": string,
       "board": [ {
           "nickname": string,
           "x": number,
           "y": number
         }, {
           "nickname": string,
           "x": number,
           "y": number
         }
       ]
     }
   }
----

Das Koordinatenpaar `fromX`/`fromY` gibt an, wo sich die Spielfigur
befindet, die bewegt werden soll. Das Paar `toX`/`toY` gibt an, wohin
die Figur bewegt werden soll.

Im Fehlerfall antwortet der Server folgendermaßen:

----
S: {
     "response": "error",
     "payload": {
       "message": "Illegal move!"
     }
   }
----

Wenn der Zug gültig war, sendet der Server eine
<<matchUpdate,`matchUpdate`>>-Nachricht an *alle anderen Teilnehmer*
(zusätzlich zur <<matchUpdate,`matchUpdate`>>-Antwort oben).

----
S: {
     "action": "matchUpdate",
     "payload": {
       "currentPlayerNickname": string,
       "board": [ {
           "nickname": string,
           "x": number,
           "y": number
         }, {
           "nickname": string,
           "x": number,
           "y": number
         }
       ]
     }
   }

C: {
     "response": "matchUpdated"
   }
----

playerDone
~~~~~~~~~~

Beschreibung::
  Server sendet diese Nachricht an *alle Teilnehmer*, um sie zu
  benachrichtigen, dass ein Spieler sein Ziel erreicht hat.

Phase::
  Spielphase

----
S: {
     "action": "playerDone",
     "payload": {
       "nickname": string
     }
   }

C: {
     "response": "playerDone"
   }
----

`nickname` gibt an, welcher Spieler sein Ziel erreicht hat.

matchDone
~~~~~~~~~

Beschreibung::
  Server sendet diese Nachricht an *alle Teilnehmer*, um sie zu
  benachrichtigen, dass das Spiel beendet ist.

Phase::
  Spielphase

----
S: {
     "action": "matchDone",
     "payload": {
       "ranking": [
         string,
         string,
         string,
         string
       ]
     }
   }

C: {
     "response": "matchDone"
   }
----

`ranking` enthält eine Liste mit bis zu vier Einträgen. Jeder Eintrag
ist ein Name eines Spielers (`nickname`). Die Liste gibt an, in welcher
Reihenfolge die Spieler ihr Ziel erreicht haben.
